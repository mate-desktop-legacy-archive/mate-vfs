# Makefile.in generated by automake 1.11.1 from Makefile.am.
# @configure_input@

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009  Free Software Foundation,
# Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@


VPATH = @srcdir@
pkgdatadir = $(datadir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkglibexecdir = $(libexecdir)/@PACKAGE@
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = @build@
host_triplet = @host@
subdir = libmatevfs
DIST_COMMON = $(libmatevfsinclude_HEADERS) \
	$(libmatevfsmoduleinclude_HEADERS) \
	$(libmatevfsplatforminclude_HEADERS) $(noinst_HEADERS) \
	$(srcdir)/Makefile.am $(srcdir)/Makefile.in \
	$(srcdir)/mate-vfs-file-size.h.in \
	$(srcdir)/mate-vfs-version.h.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = mate-vfs-file-size.h mate-vfs-version.h
CONFIG_CLEAN_VPATH_FILES =
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__installdirs = "$(DESTDIR)$(libdir)" \
	"$(DESTDIR)$(libmatevfsincludedir)" \
	"$(DESTDIR)$(libmatevfsmoduleincludedir)" \
	"$(DESTDIR)$(libmatevfsplatformincludedir)"
LTLIBRARIES = $(lib_LTLIBRARIES) $(noinst_LTLIBRARIES)
am__DEPENDENCIES_1 =
libmatevfs_2_la_DEPENDENCIES = $(am__DEPENDENCIES_1) $(FNMATCH_LIBS) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
am__libmatevfs_2_la_SOURCES_DIST = mate-vfs-ace.c mate-vfs-acl.c \
	mate-vfs-application-registry.c mate-vfs-address.c \
	mate-vfs-async-job-map.c mate-vfs-async-ops.c \
	mate-vfs-cancellable-ops.c mate-vfs-cancellation.c \
	mate-vfs-configuration.c mate-vfs-context.c \
	mate-vfs-directory.c mate-vfs-drive.c mate-vfs-file-info.c \
	mate-vfs-filesystem-type.c mate-vfs-find-directory.c \
	mate-vfs-handle.c mate-vfs-inet-connection.c mate-vfs-init.c \
	mate-vfs-job-queue.c mate-vfs-job.c mate-vfs-method.c \
	mate-vfs-mime-handlers.c mate-vfs-mime-info.c \
	mate-vfs-mime-info-cache.c mate-vfs-mime-monitor.c \
	mate-vfs-mime-sniff-buffer.c mate-vfs-mime.c \
	mate-vfs-mime-magic.c mate-vfs-module-callback-module-api.c \
	mate-vfs-module-callback-private.c mate-vfs-module-callback.c \
	mate-vfs-module-shared.c mate-vfs-module.c mate-vfs-monitor.c \
	mate-vfs-open-fd.c mate-vfs-ops.c mate-vfs-private-utils.c \
	mate-vfs-private.c mate-vfs-resolve.c mate-vfs-result.c \
	mate-vfs-socket-buffer.c mate-vfs-socket.c mate-vfs-ssl.c \
	mate-vfs-transform.c mate-vfs-uri.c mate-vfs-utils.c \
	mate-vfs-volume-monitor.c mate-vfs-volume.c mate-vfs-xfer.c \
	xdgmimemagic.c xdgmime.c xdgmimecache.c xdgmimeglob.c \
	xdgmimeint.c xdgmimealias.c xdgmimeparent.c xdgmimeicon.c \
	mate-vfs-enum-types.c mate-vfs-cdrom.c \
	mate-vfs-daemon-method.c mate-vfs-dbus-utils.c \
	mate-vfs-dns-sd.c mate-vfs-module-callback-marshall.c \
	mate-vfs-parse-ls.c mate-vfs-pty.c \
	mate-vfs-volume-monitor-client.c mate-vfs-volume-ops.c \
	mate-vfs-dllmain.c
am__objects_1 = mate-vfs-enum-types.lo
am__objects_2 =
am__objects_3 = mate-vfs-cdrom.lo mate-vfs-daemon-method.lo \
	mate-vfs-dbus-utils.lo mate-vfs-dns-sd.lo \
	mate-vfs-module-callback-marshall.lo mate-vfs-parse-ls.lo \
	mate-vfs-pty.lo mate-vfs-volume-monitor-client.lo \
	mate-vfs-volume-ops.lo $(am__objects_2)
am__objects_4 = mate-vfs-dllmain.lo $(am__objects_2)
@OS_WIN32_FALSE@am__objects_5 = $(am__objects_3)
@OS_WIN32_TRUE@am__objects_5 = $(am__objects_4)
am_libmatevfs_2_la_OBJECTS = mate-vfs-ace.lo mate-vfs-acl.lo \
	mate-vfs-application-registry.lo mate-vfs-address.lo \
	mate-vfs-async-job-map.lo mate-vfs-async-ops.lo \
	mate-vfs-cancellable-ops.lo mate-vfs-cancellation.lo \
	mate-vfs-configuration.lo mate-vfs-context.lo \
	mate-vfs-directory.lo mate-vfs-drive.lo mate-vfs-file-info.lo \
	mate-vfs-filesystem-type.lo mate-vfs-find-directory.lo \
	mate-vfs-handle.lo mate-vfs-inet-connection.lo \
	mate-vfs-init.lo mate-vfs-job-queue.lo mate-vfs-job.lo \
	mate-vfs-method.lo mate-vfs-mime-handlers.lo \
	mate-vfs-mime-info.lo mate-vfs-mime-info-cache.lo \
	mate-vfs-mime-monitor.lo mate-vfs-mime-sniff-buffer.lo \
	mate-vfs-mime.lo mate-vfs-mime-magic.lo \
	mate-vfs-module-callback-module-api.lo \
	mate-vfs-module-callback-private.lo \
	mate-vfs-module-callback.lo mate-vfs-module-shared.lo \
	mate-vfs-module.lo mate-vfs-monitor.lo mate-vfs-open-fd.lo \
	mate-vfs-ops.lo mate-vfs-private-utils.lo mate-vfs-private.lo \
	mate-vfs-resolve.lo mate-vfs-result.lo \
	mate-vfs-socket-buffer.lo mate-vfs-socket.lo mate-vfs-ssl.lo \
	mate-vfs-transform.lo mate-vfs-uri.lo mate-vfs-utils.lo \
	mate-vfs-volume-monitor.lo mate-vfs-volume.lo mate-vfs-xfer.lo \
	xdgmimemagic.lo xdgmime.lo xdgmimecache.lo xdgmimeglob.lo \
	xdgmimeint.lo xdgmimealias.lo xdgmimeparent.lo xdgmimeicon.lo \
	$(am__objects_1) $(am__objects_5) $(am__objects_2)
libmatevfs_2_la_OBJECTS = $(am_libmatevfs_2_la_OBJECTS)
libmatevfs_2_la_LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(libmatevfs_2_la_LDFLAGS) $(LDFLAGS) -o $@
libmatevfsdaemon_2_la_DEPENDENCIES = $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) libmatevfs-2.la $(am__DEPENDENCIES_1)
am_libmatevfsdaemon_2_la_OBJECTS = mate-vfs-filesystem-type.lo \
	mate-vfs-cdrom.lo mate-vfs-hal-mounts.lo \
	mate-vfs-volume-monitor-daemon.lo mate-vfs-volume-monitor.lo \
	mate-vfs-unix-mounts.lo $(am__objects_2)
libmatevfsdaemon_2_la_OBJECTS = $(am_libmatevfsdaemon_2_la_OBJECTS)
@OS_WIN32_FALSE@am_libmatevfsdaemon_2_la_rpath =
DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(libmatevfs_2_la_SOURCES) $(libmatevfsdaemon_2_la_SOURCES)
DIST_SOURCES = $(am__libmatevfs_2_la_SOURCES_DIST) \
	$(libmatevfsdaemon_2_la_SOURCES)
HEADERS = $(libmatevfsinclude_HEADERS) \
	$(libmatevfsmoduleinclude_HEADERS) \
	$(libmatevfsplatforminclude_HEADERS) $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = @ACLOCAL@
ACLOCAL_AMFLAGS = @ACLOCAL_AMFLAGS@
ACL_LIBS = @ACL_LIBS@
ALLOCA = @ALLOCA@
ALL_LINGUAS = @ALL_LINGUAS@
AMTAR = @AMTAR@
AR = @AR@
AS = @AS@
AUTOCONF = @AUTOCONF@
AUTOHEADER = @AUTOHEADER@
AUTOMAKE = @AUTOMAKE@
AVAHI_CFLAGS = @AVAHI_CFLAGS@
AVAHI_LIBS = @AVAHI_LIBS@
AWK = @AWK@
BZ2_LIBS = @BZ2_LIBS@
CATALOGS = @CATALOGS@
CATOBJEXT = @CATOBJEXT@
CC = @CC@
CCDEPMODE = @CCDEPMODE@
CDDA_LIBS = @CDDA_LIBS@
CFLAGS = @CFLAGS@
CPP = @CPP@
CPPFLAGS = @CPPFLAGS@
CYGPATH_W = @CYGPATH_W@
DATADIRNAME = @DATADIRNAME@
DBUS_SERVICE_DIR = @DBUS_SERVICE_DIR@
DEFS = @DEFS@
DEPDIR = @DEPDIR@
DLLTOOL = @DLLTOOL@
DSYMUTIL = @DSYMUTIL@
DUMPBIN = @DUMPBIN@
ECHO_C = @ECHO_C@
ECHO_N = @ECHO_N@
ECHO_T = @ECHO_T@
EGREP = @EGREP@
ENABLE_PROFILER = @ENABLE_PROFILER@
EXEEXT = @EXEEXT@
FAM_LIBS = @FAM_LIBS@
FGREP = @FGREP@
GETTEXT_PACKAGE = @GETTEXT_PACKAGE@
GLIB_REQUIRED = @GLIB_REQUIRED@
GMOFILES = @GMOFILES@
GMSGFMT = @GMSGFMT@
GREP = @GREP@
GSSAPI_CFLAGS = @GSSAPI_CFLAGS@
GSSAPI_LIBS = @GSSAPI_LIBS@
GTKDOC_CHECK = @GTKDOC_CHECK@
GTKDOC_DEPS_CFLAGS = @GTKDOC_DEPS_CFLAGS@
GTKDOC_DEPS_LIBS = @GTKDOC_DEPS_LIBS@
GTKDOC_MKPDF = @GTKDOC_MKPDF@
GTKDOC_REBASE = @GTKDOC_REBASE@
HAL_CFLAGS = @HAL_CFLAGS@
HAL_LIBS = @HAL_LIBS@
HOWL_CFLAGS = @HOWL_CFLAGS@
HOWL_LIBS = @HOWL_LIBS@
HTML_DIR = @HTML_DIR@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
INSTOBJEXT = @INSTOBJEXT@
INTLLIBS = @INTLLIBS@
INTLTOOL_EXTRACT = @INTLTOOL_EXTRACT@
INTLTOOL_MERGE = @INTLTOOL_MERGE@
INTLTOOL_PERL = @INTLTOOL_PERL@
INTLTOOL_UPDATE = @INTLTOOL_UPDATE@
KRB5_CONFIG = @KRB5_CONFIG@
LD = @LD@
LDFLAGS = @LDFLAGS@
LIBEFS_CFLAGS = @LIBEFS_CFLAGS@
LIBEFS_LIBS = @LIBEFS_LIBS@
LIBGNUTLS_CFLAGS = @LIBGNUTLS_CFLAGS@
LIBGNUTLS_CONFIG = @LIBGNUTLS_CONFIG@
LIBGNUTLS_LIBS = @LIBGNUTLS_LIBS@
LIBMATEVFSDAEMON_CFLAGS = @LIBMATEVFSDAEMON_CFLAGS@
LIBMATEVFSDAEMON_LIBS = @LIBMATEVFSDAEMON_LIBS@
LIBMATEVFS_AGE = @LIBMATEVFS_AGE@
LIBMATEVFS_BINARY_AGE = @LIBMATEVFS_BINARY_AGE@
LIBMATEVFS_CFLAGS = @LIBMATEVFS_CFLAGS@
LIBMATEVFS_CURRENT = @LIBMATEVFS_CURRENT@
LIBMATEVFS_INTERFACE_AGE = @LIBMATEVFS_INTERFACE_AGE@
LIBMATEVFS_LIBS = @LIBMATEVFS_LIBS@
LIBMATEVFS_MAJOR_VERSION = @LIBMATEVFS_MAJOR_VERSION@
LIBMATEVFS_MICRO_VERSION = @LIBMATEVFS_MICRO_VERSION@
LIBMATEVFS_MINOR_VERSION = @LIBMATEVFS_MINOR_VERSION@
LIBMATEVFS_REVISION = @LIBMATEVFS_REVISION@
LIBMATEVFS_VERSION = @LIBMATEVFS_VERSION@
LIBOBJS = @LIBOBJS@
LIBS = @LIBS@
LIBTOOL = @LIBTOOL@
LIBTOOL_EXPORT_OPTIONS = @LIBTOOL_EXPORT_OPTIONS@
LIBXML_CFLAGS = @LIBXML_CFLAGS@
LIBXML_LIBS = @LIBXML_LIBS@
LIPO = @LIPO@
LN_S = @LN_S@
LTLIBOBJS = @LTLIBOBJS@
MAINT = @MAINT@
MAKEINFO = @MAKEINFO@
MANIFEST_TOOL = @MANIFEST_TOOL@
MATECONFTOOL = @MATECONFTOOL@
MATECONF_REQUIRED = @MATECONF_REQUIRED@
MATECONF_SCHEMA_CONFIG_SOURCE = @MATECONF_SCHEMA_CONFIG_SOURCE@
MATECONF_SCHEMA_FILE_DIR = @MATECONF_SCHEMA_FILE_DIR@
MATE_VFS_DIR = @MATE_VFS_DIR@
MKDIR_P = @MKDIR_P@
MKINSTALLDIRS = @MKINSTALLDIRS@
MODULES_CFLAGS = @MODULES_CFLAGS@
MODULES_FILE_CFLAGS = @MODULES_FILE_CFLAGS@
MODULES_FILE_LIBS = @MODULES_FILE_LIBS@
MODULES_LIBS = @MODULES_LIBS@
MODULES_MATECONF_CFLAGS = @MODULES_MATECONF_CFLAGS@
MODULES_MATECONF_LIBS = @MODULES_MATECONF_LIBS@
MODULES_XML_CFLAGS = @MODULES_XML_CFLAGS@
MODULES_XML_LIBS = @MODULES_XML_LIBS@
MODULES_XML_MATECONF_CFLAGS = @MODULES_XML_MATECONF_CFLAGS@
MODULES_XML_MATECONF_LIBS = @MODULES_XML_MATECONF_LIBS@
MSGFMT = @MSGFMT@
MSGFMT_OPTS = @MSGFMT_OPTS@
MSGMERGE = @MSGMERGE@
NEONOBJS = @NEONOBJS@
NEON_BUILD_BUNDLED = @NEON_BUILD_BUNDLED@
NEON_CFLAGS = @NEON_CFLAGS@
NEON_EXTRAOBJS = @NEON_EXTRAOBJS@
NEON_LIBS = @NEON_LIBS@
NEON_LINK_FLAGS = @NEON_LINK_FLAGS@
NEON_LTLIBS = @NEON_LTLIBS@
NEON_OBJEXT = @NEON_OBJEXT@
NEON_SUPPORTS_DAV = @NEON_SUPPORTS_DAV@
NEON_SUPPORTS_ZLIB = @NEON_SUPPORTS_ZLIB@
NEON_TARGET = @NEON_TARGET@
NM = @NM@
NMEDIT = @NMEDIT@
OBJDUMP = @OBJDUMP@
OBJEXT = @OBJEXT@
OPENSSL_CFLAGS = @OPENSSL_CFLAGS@
OPENSSL_LIBS = @OPENSSL_LIBS@
OTOOL = @OTOOL@
OTOOL64 = @OTOOL64@
PACKAGE = @PACKAGE@
PACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_STRING = @PACKAGE_STRING@
PACKAGE_TARNAME = @PACKAGE_TARNAME@
PACKAGE_URL = @PACKAGE_URL@
PACKAGE_VERSION = @PACKAGE_VERSION@
PATH_SEPARATOR = @PATH_SEPARATOR@
PERL = @PERL@
PKG_CONFIG = @PKG_CONFIG@
PKG_CONFIG_LIBDIR = @PKG_CONFIG_LIBDIR@
PKG_CONFIG_PATH = @PKG_CONFIG_PATH@
POFILES = @POFILES@
POSUB = @POSUB@
PO_IN_DATADIR_FALSE = @PO_IN_DATADIR_FALSE@
PO_IN_DATADIR_TRUE = @PO_IN_DATADIR_TRUE@
RANLIB = @RANLIB@
REBUILD = @REBUILD@
SAMBA_CFLAGS = @SAMBA_CFLAGS@
SAMBA_LIBS = @SAMBA_LIBS@
SED = @SED@
SELINUX_LIBS = @SELINUX_LIBS@
SET_MAKE = @SET_MAKE@
SHELL = @SHELL@
SSH_PROGRAM = @SSH_PROGRAM@
STRIP = @STRIP@
TEST_CFLAGS = @TEST_CFLAGS@
TEST_LIBS = @TEST_LIBS@
TOP_BUILDDIR = @TOP_BUILDDIR@
USE_NLS = @USE_NLS@
VERSION = @VERSION@
VFS_CFLAGS = @VFS_CFLAGS@
VFS_INCLUDEDIR = @VFS_INCLUDEDIR@
VFS_LIBDIR = @VFS_LIBDIR@
VFS_LIBS = @VFS_LIBS@
VFS_OFFSET = @VFS_OFFSET@
VFS_OFFSET_IS = @VFS_OFFSET_IS@
VFS_SIZE = @VFS_SIZE@
VFS_SIZE_IS = @VFS_SIZE_IS@
WARN_CFLAGS = @WARN_CFLAGS@
XGETTEXT = @XGETTEXT@
XML_REQUIRED = @XML_REQUIRED@
abs_builddir = @abs_builddir@
abs_srcdir = @abs_srcdir@
abs_top_builddir = @abs_top_builddir@
abs_top_srcdir = @abs_top_srcdir@
ac_ct_AR = @ac_ct_AR@
ac_ct_CC = @ac_ct_CC@
ac_ct_DUMPBIN = @ac_ct_DUMPBIN@
am__include = @am__include@
am__leading_dot = @am__leading_dot@
am__quote = @am__quote@
am__tar = @am__tar@
am__untar = @am__untar@
bindir = @bindir@
build = @build@
build_alias = @build_alias@
build_cpu = @build_cpu@
build_os = @build_os@
build_vendor = @build_vendor@
builddir = @builddir@
datadir = @datadir@
datarootdir = @datarootdir@
docdir = @docdir@
dvidir = @dvidir@
exec_prefix = @exec_prefix@
host = @host@
host_alias = @host_alias@
host_cpu = @host_cpu@
host_os = @host_os@
host_vendor = @host_vendor@
htmldir = @htmldir@
includedir = @includedir@
infodir = @infodir@
install_sh = @install_sh@
libdir = @libdir@
libexecdir = @libexecdir@
localedir = @localedir@
localstatedir = @localstatedir@
mandir = @mandir@
mkdir_p = @mkdir_p@
oldincludedir = @oldincludedir@
pdfdir = @pdfdir@
prefix = @prefix@
program_transform_name = @program_transform_name@
psdir = @psdir@
sbindir = @sbindir@
sharedstatedir = @sharedstatedir@
srcdir = @srcdir@
sysconfdir = @sysconfdir@
target_alias = @target_alias@
top_build_prefix = @top_build_prefix@
top_builddir = @top_builddir@
top_srcdir = @top_srcdir@
NULL = 
@OS_WIN32_TRUE@FNMATCH_CFLAGS = -I$(top_srcdir)/imported/fnmatch
@OS_WIN32_TRUE@FNMATCH_LIBS = ../imported/fnmatch/libfnmatch.la
INCLUDES = \
	-I$(top_srcdir)				\
	-I$(top_builddir)			\
	$(LIBMATEVFS_CFLAGS)			\
	$(LIBMATEVFSDAEMON_CFLAGS)		\
	$(VFS_CFLAGS)				\
	$(FNMATCH_CFLAGS)			\
	-DXDG_PREFIX=_mate_vfs_xdg		\
	-DDBUS_API_SUBJECT_TO_CHANGE		\
	-D_FILE_OFFSET_BITS=64			\
	-D_BSD_SOURCE				\
	-D_LARGEFILE64_SOURCE                   \
	-D_POSIX_PTHREAD_SEMANTICS		\
	-D_REENTRANT				\
	-DG_DISABLE_DEPRECATED			\
	-DMATE_VFS_PREFIX=\"$(prefix)\"	\
	-DMATE_VFS_BINDIR=\"$(bindir)\"	\
	-DMATE_VFS_DATADIR=\"$(datadir)\"	\
	-DMATE_VFS_LIBDIR=\"$(libdir)\"	\
	-DMATE_VFS_LOCALEDIR=\"$(prefix)/@DATADIRNAME@/locale\" \
	-DMATE_VFS_SYSCONFDIR=\"$(sysconfdir)\"\
	-DG_LOG_DOMAIN=\"libmatevfs\"		\
	$(NULL)

libmatevfs_headers_to_scan_for_enums = \
	mate-vfs-address.h			\
	mate-vfs-application-registry.h	\
	mate-vfs-async-ops.h			\
	mate-vfs-cancellation.h		\
	mate-vfs-context.h			\
	mate-vfs-directory.h			\
	mate-vfs-drive.h			\
	mate-vfs-file-info.h			\
	mate-vfs-file-size.h			\
	mate-vfs-find-directory.h		\
	mate-vfs-handle.h			\
	mate-vfs-init.h			\
	mate-vfs-job-limit.h			\
	mate-vfs-mime.h			\
	mate-vfs-mime-deprecated.h		\
	mate-vfs-mime-handlers.h		\
	mate-vfs-mime-info-cache.h		\
	mate-vfs-mime-monitor.h		\
	mate-vfs-mime-utils.h			\
	mate-vfs-module-callback.h		\
	mate-vfs-monitor.h			\
	mate-vfs-ops.h				\
	mate-vfs-resolve.h			\
	mate-vfs-result.h			\
	mate-vfs-standard-callbacks.h		\
	mate-vfs-types.h			\
	mate-vfs-utils.h			\
	mate-vfs-volume.h			\
	mate-vfs-volume-monitor.h		\
	mate-vfs-xfer.h			\
	mate-vfs.h				\
	$(NULL)

libmatevfs_headers = \
	$(libmatevfs_headers_to_scan_for_enums)\
	mate-vfs-dns-sd.h			\
	mate-vfs-version.h			\
	mate-vfs-uri.h				\
	$(NULL)

export_symbols = $(LIBTOOL_EXPORT_OPTIONS)

# Generate the enums source code, with glib-mkenums:
# This is based on the same Makefile.am stuff in pango:
libmatevfs_built_headers = mate-vfs-enum-types.h
libmatevfs_built_cfiles = mate-vfs-enum-types.c
lib_LTLIBRARIES = libmatevfs-2.la
@OS_WIN32_TRUE@SOCKET_LIBS = -lws2_32
@OS_WIN32_FALSE@noinst_LTLIBRARIES = libmatevfsdaemon-2.la
libmatevfs_2_la_LIBADD = \
	$(LIBMATEVFS_LIBS)			\
	$(FNMATCH_LIBS)				\
	$(SOCKET_LIBS)				\
	$(INTLLIBS)				\
	$(SELINUX_LIBS)				\
	$(NULL)

libmatevfs_2_la_LDFLAGS = \
	-version-info $(LIBMATEVFS_CURRENT):$(LIBMATEVFS_REVISION):$(LIBMATEVFS_AGE) \
	-no-undefined \
	$(export_symbols) \
	$(NULL)

libmatevfsdaemon_2_la_LIBADD = \
	$(LIBMATEVFS_LIBS)			\
	$(LIBMATEVFSDAEMON_LIBS)		\
	libmatevfs-2.la			\
	$(NULL)

libmatevfsincludedir = $(includedir)/mate-vfs-2.0/libmatevfs
libmatevfsmoduleincludedir = $(includedir)/mate-vfs-module-2.0/libmatevfs

# mime-sniff-buffers and cancellabe-ops are used by modules
noinst_HEADERS = \
	mate-vfs-async-job-map.h		\
	mate-vfs-backend.h			\
	mate-vfs-cancellable-ops.h		\
	mate-vfs-cancellation-private.h	\
	mate-vfs-cdrom.h			\
	mate-vfs-configuration.h		\
	mate-vfs-daemon-method.h		\
	mate-vfs-dbus-utils.h                  \
	mate-vfs-filesystem-type.h		\
	mate-vfs-handle-private.h		\
	mate-vfs-hal-mounts.h			\
	mate-vfs-iso9660.h			\
	mate-vfs-job-queue.h			\
	mate-vfs-job.h				\
	mate-vfs-mime-magic.h			\
	mate-vfs-mime-private.h		\
	mate-vfs-mime-sniff-buffer-private.h	\
	mate-vfs-mime-sniff-buffer.h		\
	mate-vfs-module-callback-private.h	\
	mate-vfs-monitor-private.h		\
	mate-vfs-private-utils.h		\
	mate-vfs-private.h			\
	mate-vfs-unix-mounts.h 		\
	mate-vfs-volume-monitor-client.h	\
	mate-vfs-volume-monitor-daemon.h	\
	mate-vfs-volume-monitor-private.h 	\
	xdgmime.h				\
	xdgmimecache.h				\
	xdgmimeglob.h				\
	xdgmimemagic.h				\
	xdgmimeint.h				\
	xdgmimealias.h				\
	xdgmimeparent.h				\
	xdgmimeicon.h				\
	$(NULL)

libmatevfsmoduleinclude_HEADERS = \
	mate-vfs-cancellable-ops.h		\
	mate-vfs-inet-connection.h		\
	mate-vfs-method.h			\
	mate-vfs-mime-info.h			\
	mate-vfs-module-callback-module-api.h	\
	mate-vfs-module-shared.h		\
	mate-vfs-module.h			\
	mate-vfs-parse-ls.h			\
	mate-vfs-ssl.h				\
	mate-vfs-transform.h			\
	mate-vfs-socket-buffer.h		\
	mate-vfs-socket.h			\
	mate-vfs-pty.h				\
	$(NULL)

libmatevfsinclude_HEADERS = \
	mate-vfs-ace.h						\
	mate-vfs-acl.h						\
	mate-vfs-application-registry.h	\
	mate-vfs-address.h			\
	mate-vfs-async-ops.h			\
	mate-vfs-cancellation.h		\
	mate-vfs-context.h			\
	mate-vfs-directory.h			\
	mate-vfs-dns-sd.h			\
	mate-vfs-drive.h			\
	mate-vfs-enum-types.h			\
	mate-vfs-file-info.h			\
	mate-vfs-file-size.h			\
	mate-vfs-find-directory.h		\
	mate-vfs-handle.h			\
	mate-vfs-init.h			\
	mate-vfs-job-limit.h			\
	mate-vfs-mime.h			\
	mate-vfs-mime-deprecated.h		\
	mate-vfs-mime-handlers.h		\
	mate-vfs-mime-info-cache.h		\
	mate-vfs-mime-monitor.h		\
	mate-vfs-mime-utils.h			\
	mate-vfs-module-callback.h		\
	mate-vfs-monitor.h			\
	mate-vfs-ops.h				\
	mate-vfs-resolve.h			\
	mate-vfs-result.h			\
	mate-vfs-standard-callbacks.h		\
	mate-vfs-types.h			\
	mate-vfs-uri.h				\
	mate-vfs-utils.h			\
	mate-vfs-version.h			\
	mate-vfs-volume-monitor.h		\
	mate-vfs-volume.h			\
	mate-vfs-xfer.h			\
	mate-vfs.h				\
	$(NULL)

libmatevfs_win32_sources = \
	mate-vfs-dllmain.c			\
	$(NULL)

libmatevfs_unix_sources = \
	mate-vfs-cdrom.c			\
	mate-vfs-daemon-method.c		\
	mate-vfs-dbus-utils.c			\
	mate-vfs-dns-sd.c			\
	mate-vfs-module-callback-marshall.c	\
	mate-vfs-parse-ls.c			\
	mate-vfs-pty.c				\
	mate-vfs-volume-monitor-client.c	\
	mate-vfs-volume-ops.c			\
	$(NULL)

@OS_WIN32_FALSE@libmatevfs_platform_sources = $(libmatevfs_unix_sources)
@OS_WIN32_TRUE@libmatevfs_platform_sources = $(libmatevfs_win32_sources)
libmatevfs_2_la_SOURCES = \
	mate-vfs-ace.c						\
	mate-vfs-acl.c						\
	mate-vfs-application-registry.c	\
	mate-vfs-address.c			\
	mate-vfs-async-job-map.c		\
	mate-vfs-async-ops.c			\
	mate-vfs-cancellable-ops.c	 	\
	mate-vfs-cancellation.c		\
	mate-vfs-configuration.c		\
	mate-vfs-context.c			\
	mate-vfs-directory.c			\
	mate-vfs-drive.c			\
	mate-vfs-file-info.c			\
	mate-vfs-filesystem-type.c		\
	mate-vfs-find-directory.c		\
	mate-vfs-handle.c			\
	mate-vfs-inet-connection.c		\
	mate-vfs-init.c			\
	mate-vfs-job-queue.c			\
	mate-vfs-job.c				\
	mate-vfs-method.c			\
	mate-vfs-mime-handlers.c		\
	mate-vfs-mime-info.c			\
	mate-vfs-mime-info-cache.c		\
	mate-vfs-mime-monitor.c		\
	mate-vfs-mime-sniff-buffer.c		\
	mate-vfs-mime.c			\
	mate-vfs-mime-magic.c			\
	mate-vfs-module-callback-module-api.c	\
	mate-vfs-module-callback-private.c	\
	mate-vfs-module-callback.c		\
	mate-vfs-module-shared.c		\
	mate-vfs-module.c			\
	mate-vfs-monitor.c			\
	mate-vfs-open-fd.c			\
	mate-vfs-ops.c				\
	mate-vfs-private-utils.c		\
	mate-vfs-private.c			\
	mate-vfs-resolve.c			\
	mate-vfs-result.c			\
	mate-vfs-socket-buffer.c		\
	mate-vfs-socket.c			\
	mate-vfs-ssl.c				\
	mate-vfs-transform.c			\
	mate-vfs-uri.c				\
	mate-vfs-utils.c			\
	mate-vfs-volume-monitor.c		\
	mate-vfs-volume.c			\
	mate-vfs-xfer.c			\
	xdgmimemagic.c				\
	xdgmime.c				\
	xdgmimecache.c				\
	xdgmimeglob.c				\
	xdgmimeint.c				\
	xdgmimealias.c				\
	xdgmimeparent.c				\
	xdgmimeicon.c				\
	$(libmatevfs_built_cfiles)		\
	$(libmatevfs_platform_sources)		\
	$(NULL)


# The daemon uses all interfaces in mate-vfs-cdrom
# and uses _mate_vfs_filesystem_volume_name, which all
# only use static data.
#
libmatevfsdaemon_2_la_SOURCES = \
	mate-vfs-filesystem-type.c		\
	mate-vfs-cdrom.c			\
	mate-vfs-hal-mounts.c			\
	mate-vfs-volume-monitor-daemon.c	\
	mate-vfs-volume-monitor.c	 	\
	mate-vfs-unix-mounts.c			\
	$(NULL)


# Platform specific includes
libmatevfsplatformincludedir = $(libdir)/mate-vfs-2.0/include
libmatevfsplatforminclude_HEADERS = \
	mate-vfs-file-size.h


# TESTS = check-headers.pl
EXTRA_DIST = check-headers.pl $(libmatevfs_win32_sources)
BUILT_SOURCES = \
	mate-vfs-enum-types.h			\
	mate-vfs-enum-types.c			\
	mate-vfs-version.h			\
	$(NULL)

CLEANFILES = $(BUILT_SOURCES)
all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu libmatevfs/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu libmatevfs/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
mate-vfs-file-size.h: $(top_builddir)/config.status $(srcdir)/mate-vfs-file-size.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
mate-vfs-version.h: $(top_builddir)/config.status $(srcdir)/mate-vfs-version.h.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	test -z "$(libdir)" || $(MKDIR_P) "$(DESTDIR)$(libdir)"
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	list2=; for p in $$list; do \
	  if test -f $$p; then \
	    list2="$$list2 $$p"; \
	  else :; fi; \
	done; \
	test -z "$$list2" || { \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 "$(DESTDIR)$(libdir)"; \
	}

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	@list='$(lib_LTLIBRARIES)'; test -n "$(libdir)" || list=; \
	for p in $$list; do \
	  $(am__strip_dir) \
	  echo " $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'"; \
	  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f "$(DESTDIR)$(libdir)/$$f"; \
	done

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libmatevfs-2.la: $(libmatevfs_2_la_OBJECTS) $(libmatevfs_2_la_DEPENDENCIES) 
	$(libmatevfs_2_la_LINK) -rpath $(libdir) $(libmatevfs_2_la_OBJECTS) $(libmatevfs_2_la_LIBADD) $(LIBS)
libmatevfsdaemon-2.la: $(libmatevfsdaemon_2_la_OBJECTS) $(libmatevfsdaemon_2_la_DEPENDENCIES) 
	$(LINK) $(am_libmatevfsdaemon_2_la_rpath) $(libmatevfsdaemon_2_la_OBJECTS) $(libmatevfsdaemon_2_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-ace.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-acl.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-address.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-application-registry.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-async-job-map.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-async-ops.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-cancellable-ops.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-cancellation.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-cdrom.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-configuration.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-context.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-daemon-method.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-dbus-utils.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-directory.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-dllmain.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-dns-sd.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-drive.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-enum-types.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-file-info.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-filesystem-type.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-find-directory.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-hal-mounts.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-handle.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-inet-connection.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-init.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-job-queue.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-job.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-method.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-mime-handlers.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-mime-info-cache.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-mime-info.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-mime-magic.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-mime-monitor.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-mime-sniff-buffer.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-mime.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-module-callback-marshall.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-module-callback-module-api.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-module-callback-private.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-module-callback.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-module-shared.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-module.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-monitor.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-open-fd.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-ops.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-parse-ls.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-private-utils.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-private.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-pty.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-resolve.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-result.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-socket-buffer.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-socket.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-ssl.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-transform.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-unix-mounts.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-uri.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-utils.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-volume-monitor-client.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-volume-monitor-daemon.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-volume-monitor.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-volume-ops.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-volume.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mate-vfs-xfer.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xdgmime.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xdgmimealias.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xdgmimecache.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xdgmimeglob.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xdgmimeicon.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xdgmimeint.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xdgmimemagic.Plo@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/xdgmimeparent.Plo@am__quote@

.c.o:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c $<

.c.obj:
@am__fastdepCC_TRUE@	$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
@am__fastdepCC_TRUE@	$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
@am__fastdepCC_TRUE@	$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@
@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
@am__fastdepCC_FALSE@	$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-libmatevfsincludeHEADERS: $(libmatevfsinclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(libmatevfsincludedir)" || $(MKDIR_P) "$(DESTDIR)$(libmatevfsincludedir)"
	@list='$(libmatevfsinclude_HEADERS)'; test -n "$(libmatevfsincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(libmatevfsincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(libmatevfsincludedir)" || exit $$?; \
	done

uninstall-libmatevfsincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(libmatevfsinclude_HEADERS)'; test -n "$(libmatevfsincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libmatevfsincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(libmatevfsincludedir)" && rm -f $$files
install-libmatevfsmoduleincludeHEADERS: $(libmatevfsmoduleinclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(libmatevfsmoduleincludedir)" || $(MKDIR_P) "$(DESTDIR)$(libmatevfsmoduleincludedir)"
	@list='$(libmatevfsmoduleinclude_HEADERS)'; test -n "$(libmatevfsmoduleincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(libmatevfsmoduleincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(libmatevfsmoduleincludedir)" || exit $$?; \
	done

uninstall-libmatevfsmoduleincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(libmatevfsmoduleinclude_HEADERS)'; test -n "$(libmatevfsmoduleincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libmatevfsmoduleincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(libmatevfsmoduleincludedir)" && rm -f $$files
install-libmatevfsplatformincludeHEADERS: $(libmatevfsplatforminclude_HEADERS)
	@$(NORMAL_INSTALL)
	test -z "$(libmatevfsplatformincludedir)" || $(MKDIR_P) "$(DESTDIR)$(libmatevfsplatformincludedir)"
	@list='$(libmatevfsplatforminclude_HEADERS)'; test -n "$(libmatevfsplatformincludedir)" || list=; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_HEADER) $$files '$(DESTDIR)$(libmatevfsplatformincludedir)'"; \
	  $(INSTALL_HEADER) $$files "$(DESTDIR)$(libmatevfsplatformincludedir)" || exit $$?; \
	done

uninstall-libmatevfsplatformincludeHEADERS:
	@$(NORMAL_UNINSTALL)
	@list='$(libmatevfsplatforminclude_HEADERS)'; test -n "$(libmatevfsplatformincludedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	test -n "$$files" || exit 0; \
	echo " ( cd '$(DESTDIR)$(libmatevfsplatformincludedir)' && rm -f" $$files ")"; \
	cd "$(DESTDIR)$(libmatevfsplatformincludedir)" && rm -f $$files

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) check-am
all-am: Makefile $(LTLIBRARIES) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(libdir)" "$(DESTDIR)$(libmatevfsincludedir)" "$(DESTDIR)$(libmatevfsmoduleincludedir)" "$(DESTDIR)$(libmatevfsplatformincludedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-generic clean-libLTLIBRARIES clean-libtool \
	clean-noinstLTLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-libmatevfsincludeHEADERS \
	install-libmatevfsmoduleincludeHEADERS \
	install-libmatevfsplatformincludeHEADERS

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am: install-libLTLIBRARIES

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-libLTLIBRARIES \
	uninstall-libmatevfsincludeHEADERS \
	uninstall-libmatevfsmoduleincludeHEADERS \
	uninstall-libmatevfsplatformincludeHEADERS

.MAKE: all check install install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libLTLIBRARIES clean-libtool clean-noinstLTLIBRARIES \
	ctags distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-libLTLIBRARIES \
	install-libmatevfsincludeHEADERS \
	install-libmatevfsmoduleincludeHEADERS \
	install-libmatevfsplatformincludeHEADERS install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-libLTLIBRARIES uninstall-libmatevfsincludeHEADERS \
	uninstall-libmatevfsmoduleincludeHEADERS \
	uninstall-libmatevfsplatformincludeHEADERS


# Don't build the library until we have built the header that it needs:
$(OBJECTS) $(libmatevfs_2_la_OBJECTS): $(libmatevfs_built_headers)

mate-vfs-enum-types.h: @REBUILD@ $(libmatevfs_headers_to_scan_for_enums) Makefile
	(cd $(srcdir) && glib-mkenums \
			--fhead "#ifndef __LIBMATEVFS_ENUM_TYPES_H__\n#define __LIBMATEVFS_ENUM_TYPES_H__\n\n#include <glib-object.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n" \
			--fprod "/* enumerations from \"@filename@\" */\n" \
			--vhead "GType @enum_name@_get_type (void);\n#define MATE_VFS_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n" 	\
			--ftail "#ifdef __cplusplus\n}\n#endif\n\n#endif /* __LIBMATEVFS_ENUM_TYPES_H__ */" \
		$(libmatevfs_headers_to_scan_for_enums)) > $@

mate-vfs-enum-types.c: @REBUILD@ $(libmatevfs_headers_to_scan_for_enums) Makefile
	(cd $(srcdir) && glib-mkenums \
			--fhead "#include <libmatevfs/mate-vfs.h>\n" \
			--fhead "#include <libmatevfs/mate-vfs-mime-handlers.h>\n" \
			--fhead "#include <glib-object.h>" \
		      	--fprod "\n/* enumerations from \"@filename@\" */" \
			--vhead "GType\n@enum_name@_get_type (void)\n{\n  static GType etype = 0;\n  if (etype == 0) {\n    static const G@Type@Value values[] = {" 	\
			--vprod "      { @VALUENAME@, \"@VALUENAME@\", \"@valuenick@\" }," \
			--vtail "      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static (\"@EnumName@\", values);\n  }\n  return etype;\n}\n" \
		$(libmatevfs_headers_to_scan_for_enums)) > $@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
